var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "canvasDimension", function () {
  return canvasDimension;
});
_parcelHelpers.export(exports, "tileWidth", function () {
  return tileWidth;
});
_parcelHelpers.export(exports, "tileHeight", function () {
  return tileHeight;
});
var _snake = require("./snake");
var _food = require("./food");
const canvas = document.getElementById("canvas");
const context2D = canvas.getContext("2d");
const size = 1000;
canvas.width = size;
canvas.height = size / 2;
const canvasDimension = {
  x: canvas.width,
  y: canvas.height
};
const tileWidth = 20, tileHeight = 20;
const snake = new _snake.Snake({
  x: 0,
  y: 6
}, {
  x: 0,
  y: 5
}, {
  x: 0,
  y: 4
}, {
  x: 0,
  y: 3
}, {
  x: 0,
  y: 2
});
const food = new _food.Food();
const entities = [snake, food];
console.log(food);
console.log(snake);
function draw(board) {
  board.clearRect(0, 0, canvas.width, canvas.height);
  entities.forEach(entity => entity.draw(context2D));
}
function tick() {
  snake.update(canvas.width, canvas.height);
  food.update(snake);
  draw(context2D);
  console.log(snake.snakeParts);
}
let prevRenderTime;
function gameLoop(currentTime) {
  window.requestAnimationFrame(gameLoop);
  const difference = (currentTime - prevRenderTime) / 1000;
  if (difference < 1 / snake.speed) return;
  // console.log("render");
  prevRenderTime = currentTime;
  tick();
}
window.requestAnimationFrame(gameLoop);
