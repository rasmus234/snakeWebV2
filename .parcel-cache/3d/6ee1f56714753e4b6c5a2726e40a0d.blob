{"mappings":"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","sources":["./input.ts","./main.ts","./snake.ts","./food.ts"],"sourcesContent":["import {Vec2D} from \"./vec2D\";\r\n\r\nlet direction: Vec2D = {x: 0, y: 1}\r\n\r\nwindow.addEventListener(\"keydown\", ev => {\r\n  switch (ev.key) {\r\n    case \"ArrowUp\":\r\n    case \"w\":\r\n      if (direction.y === 1) break\r\n      direction = {x: 0, y: -1}\r\n      break\r\n    case \"ArrowDown\":\r\n    case \"s\":\r\n      if (direction.y === -1) break\r\n      direction = {x: 0, y: +1}\r\n      break\r\n    case \"ArrowRight\":\r\n    case \"d\":\r\n      if (direction.x === -1) break\r\n      direction = {x: 1, y: 0}\r\n      break\r\n    case \"ArrowLeft\":\r\n    case \"a\":\r\n      if (direction.x === 1) break\r\n      direction = {x: -1, y: 0}\r\n      break\r\n  }\r\n})\r\n\r\nexport function getDirection() {\r\n  return direction\r\n}\r\n","\r\n({\r\n  plugins: ['jsdom-quokka-plugin'],\r\n  jsdom: {html: `<canvas id=\"canvas\"></canvas>`}\r\n})\r\n\r\n\r\n\r\nimport {Snake} from \"./snake\";\r\nimport {Food} from \"./food\";\r\nimport {Vec2D} from \"./vec2D\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst context2D: CanvasRenderingContext2D = canvas.getContext(\"2d\")\r\n\r\ncontext2D.fillStyle = \"#FF0000\"\r\nconst size = 1000\r\ncanvas.width = size\r\ncanvas.height = size/2\r\nexport const canvasDimension: Vec2D = {x: canvas.width,y:canvas.height}\r\n\r\n\r\nlet prevRenderTime: number\r\nexport const tileWidth = 20, tileHeight = 20;\r\nconst snake: Snake = new Snake({x: 0, y: 6}, {x: 0, y: 5}, {x: 0, y: 4}, {x: 0, y: 3}, {x: 0, y: 2})\r\nconst food: Food = new Food({x:1,y:2})\r\nfood.setRandomLocation()\r\nconsole.log(food);\r\nconsole.log(snake);\r\n\r\n\r\nfunction draw(board: CanvasRenderingContext2D) {\r\n  board.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  food.draw(board)\r\n  snake.draw(board)\r\n}\r\n\r\nfunction tick() {\r\n  snake.update(canvas.width,canvas.height)\r\n  food.update(snake)\r\n  draw(context2D)\r\n  console.log(snake.snakeParts);\r\n  // console.log(food.food);\r\n}\r\n\r\nfunction gameLoop(currentTime) {\r\n  window.requestAnimationFrame(gameLoop)\r\n  const difference = (currentTime - prevRenderTime) / 1000\r\n  if (difference < 1 / snake.speed) return\r\n  // console.log(\"render\");\r\n  prevRenderTime = currentTime\r\n\r\n  tick()\r\n}\r\n\r\nwindow.requestAnimationFrame(gameLoop)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import \"./Drawable\"\r\nimport {tileWidth, tileHeight} from \"./main\";\r\nimport {Vec2D} from \"./vec2D\";\r\nimport {getDirection} from \"./input\";\r\nimport {Drawable} from \"./Drawable\";\r\n\r\n\r\nexport class Snake implements Drawable {\r\n  speed = 10\r\n  color = \"#FF0000\";\r\n  snakeParts: Vec2D[]\r\n\r\n  constructor(...bodyParts: Vec2D[]) {\r\n    this.snakeParts = bodyParts\r\n  }\r\n\r\n  draw(gameboard: CanvasRenderingContext2D) {\r\n\r\n    gameboard.fillStyle = this.color\r\n    this.snakeParts.forEach(part => gameboard.fillRect(part.x * tileWidth, part.y * tileHeight, tileWidth, tileHeight));\r\n  }\r\n\r\n\r\n  update(canvasWidth, canvasHeight) {\r\n    this.move(canvasWidth, canvasHeight);\r\n  }\r\n\r\n  private move(canvasWidth, canvasHeight) {\r\n    this.snakeParts.pop()\r\n    let currentHead: Vec2D = this.snakeParts[0];\r\n    let newHead: Vec2D = {x: currentHead.x + getDirection().x, y: currentHead.y + getDirection().y};\r\n    let overlapOfSelf = this.checkOverlap(newHead);\r\n    let outBounds = this.checkBounds(newHead, canvasWidth, canvasHeight);\r\n    if (outBounds || overlapOfSelf) { // @ts-ignore\r\n      window.location = \"/\"\r\n      alert(\"dead\")\r\n    }\r\n    this.snakeParts.unshift(newHead)\r\n\r\n\r\n  }\r\n\r\n  private checkOverlap(newHead: Vec2D) {\r\n    let overlap = this.snakeParts.some(bodyPart => bodyPart.x === newHead.x && bodyPart.y === newHead.y)\r\n    return overlap;\r\n  }\r\n\r\n  private checkBounds(newHead: Vec2D, canvasWidth, canvasHeight) {\r\n    let outBounds = newHead.x < 0 || newHead.x > canvasWidth / tileWidth || newHead.y < 0 || newHead.y >= canvasHeight / tileHeight;\r\n    return outBounds;\r\n  }\r\n\r\n  public addSegment() {\r\n    let tail: Vec2D = this.snakeParts[this.snakeParts.length - 1]\r\n    this.snakeParts.push(tail)\r\n  }\r\n}\r\n","import {Vec2D} from \"./vec2D\";\r\nimport {Drawable} from \"./Drawable\";\r\nimport {canvasDimension, tileWidth, tileHeight} from \"./main\";\r\nimport {Snake} from \"./snake\";\r\n\r\nexport class Food implements Drawable {\r\n  food: Vec2D\r\n  color = \"#fdc601\";\r\n\r\n  constructor(food: Vec2D) {\r\n    this.food = food\r\n  }\r\n\r\n  draw(gameboard: CanvasRenderingContext2D) {\r\n    gameboard.fillStyle = this.color\r\n    gameboard.fillRect(this.food.x * tileWidth, this.food.y * tileHeight, tileWidth, tileHeight)\r\n  }\r\n\r\n  update(snake: Snake) {\r\n    let snakeHead = snake.snakeParts[0]\r\n    let snakeOnFood = (snakeHead.x === this.food.x && snakeHead.y === this.food.y)\r\n    if (snakeOnFood) {\r\n      snake.addSegment()\r\n      snake.speed += 3\r\n      this.setRandomLocation()\r\n    }\r\n  }\r\n\r\n  setRandomLocation() {\r\n    let x = Math.floor(Math.random() * (canvasDimension.x / tileWidth));\r\n    let y = Math.floor(Math.random() * (canvasDimension.y / tileHeight));\r\n    this.food = {x: x, y: y}\r\n  }\r\n\r\n}\r\n\r\n\r\n"],"names":["$6ef0aff4d40b342494c36e09b9b2e0e6$var$direction","x","y","$6ef0aff4d40b342494c36e09b9b2e0e6$export$getDirection","window","addEventListener","ev","key","$178e1fdd5ecd9530c09e0a11c6b81613$var$canvas","document","getElementById","$178e1fdd5ecd9530c09e0a11c6b81613$var$context2D","getContext","fillStyle","width","height","$178e1fdd5ecd9530c09e0a11c6b81613$var$size","canvasDimension","$178e1fdd5ecd9530c09e0a11c6b81613$var$prevRenderTime","tileWidth","tileHeight","$178e1fdd5ecd9530c09e0a11c6b81613$var$snake","speed","color","constructor","bodyParts","this","snakeParts","draw","gameboard","forEach","part","fillRect","update","canvasWidth","canvasHeight","move","pop","currentHead","newHead","overlapOfSelf","checkOverlap","checkBounds","location","alert","unshift","some","bodyPart","addSegment","tail","length","push","$178e1fdd5ecd9530c09e0a11c6b81613$var$food","food","snake","snakeHead","setRandomLocation","Math","floor","random","$178e1fdd5ecd9530c09e0a11c6b81613$var$tick","board","clearRect","console","log","requestAnimationFrame","$178e1fdd5ecd9530c09e0a11c6b81613$var$gameLoop","currentTime"],"version":3,"file":"index.HASH_REF_db3318b8f509e574176859d14f56edd8.js.map"}