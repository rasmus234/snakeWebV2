{"mappings":"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","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./index.756482a0.js","./input.ts","./main.ts","./snake.ts","./food.ts","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js"],"sourcesContent":[null,null,"import {Vec2D} from \"./vec2D\";\r\n\r\nlet direction: Vec2D = {x: 0, y: 1}\r\n\r\nwindow.addEventListener(\"keydown\", ev => {\r\n  switch (ev.key) {\r\n    case \"ArrowUp\":\r\n    case \"w\":\r\n      if (direction.y === 1) break\r\n      direction = {x: 0, y: -1}\r\n      break\r\n    case \"ArrowDown\":\r\n    case \"s\":\r\n      if (direction.y === -1) break\r\n      direction = {x: 0, y: +1}\r\n      break\r\n    case \"ArrowRight\":\r\n    case \"d\":\r\n      if (direction.x === -1) break\r\n      direction = {x: 1, y: 0}\r\n      break\r\n    case \"ArrowLeft\":\r\n    case \"a\":\r\n      if (direction.x === 1) break\r\n      direction = {x: -1, y: 0}\r\n      break\r\n  }\r\n})\r\n\r\nexport function getDirection() {\r\n  return direction\r\n}\r\n","\r\n({\r\n  plugins: ['jsdom-quokka-plugin'],\r\n  jsdom: {html: `<canvas id=\"canvas\"></canvas>`}\r\n})\r\n\r\n\r\n\r\nimport {Snake} from \"./snake\";\r\nimport {Food} from \"./food\";\r\nimport {Vec2D} from \"./vec2D\";\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nconst context2D: CanvasRenderingContext2D = canvas.getContext(\"2d\")\r\n\r\ncontext2D.fillStyle = \"#FF0000\"\r\nconst size = 1000\r\ncanvas.width = size\r\ncanvas.height = size/2\r\nexport const canvasDimension: Vec2D = {x: canvas.width,y:canvas.height}\r\n\r\n\r\nlet prevRenderTime: number\r\nexport const tileWidth = 20, tileHeight = 20;\r\nconst snake: Snake = new Snake({x: 0, y: 6}, {x: 0, y: 5}, {x: 0, y: 4}, {x: 0, y: 3}, {x: 0, y: 2})\r\nconst food: Food = new Food({x:1,y:2})\r\nfood.setRandomLocation()\r\nconsole.log(food);\r\nconsole.log(snake);\r\n\r\n\r\nfunction draw(board: CanvasRenderingContext2D) {\r\n  board.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  food.draw(board)\r\n  snake.draw(board)\r\n}\r\n\r\nfunction tick() {\r\n  snake.update(canvas.width,canvas.height)\r\n  food.update(snake)\r\n  draw(context2D)\r\n  console.log(snake.snakeParts);\r\n  // console.log(food.food);\r\n}\r\n\r\nfunction gameLoop(currentTime) {\r\n  window.requestAnimationFrame(gameLoop)\r\n  const difference = (currentTime - prevRenderTime) / 1000\r\n  if (difference < 1 / snake.speed) return\r\n  // console.log(\"render\");\r\n  prevRenderTime = currentTime\r\n\r\n  tick()\r\n}\r\n\r\nwindow.requestAnimationFrame(gameLoop)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import \"./Drawable\"\r\nimport {tileWidth, tileHeight} from \"./main\";\r\nimport {Vec2D} from \"./vec2D\";\r\nimport {getDirection} from \"./input\";\r\nimport {Drawable} from \"./Drawable\";\r\n\r\n\r\nexport class Snake implements Drawable {\r\n  speed = 10\r\n  color = \"#FF0000\";\r\n  snakeParts: Vec2D[]\r\n\r\n  constructor(...bodyParts: Vec2D[]) {\r\n    this.snakeParts = bodyParts\r\n  }\r\n\r\n  draw(gameboard: CanvasRenderingContext2D) {\r\n\r\n    gameboard.fillStyle = this.color\r\n    this.snakeParts.forEach(part => gameboard.fillRect(part.x * tileWidth, part.y * tileHeight, tileWidth, tileHeight));\r\n  }\r\n\r\n\r\n  update(canvasWidth, canvasHeight) {\r\n    this.move(canvasWidth, canvasHeight);\r\n  }\r\n\r\n  private move(canvasWidth, canvasHeight) {\r\n    this.snakeParts.pop()\r\n    let currentHead: Vec2D = this.snakeParts[0];\r\n    let newHead: Vec2D = {x: currentHead.x + getDirection().x, y: currentHead.y + getDirection().y};\r\n    let overlapOfSelf = this.checkOverlap(newHead);\r\n    let outBounds = this.checkBounds(newHead, canvasWidth, canvasHeight);\r\n    if (outBounds || overlapOfSelf) { // @ts-ignore\r\n      window.location = \"/\"\r\n      alert(\"dead\")\r\n    }\r\n    this.snakeParts.unshift(newHead)\r\n\r\n\r\n  }\r\n\r\n  private checkOverlap(newHead: Vec2D) {\r\n    let overlap = this.snakeParts.some(bodyPart => bodyPart.x === newHead.x && bodyPart.y === newHead.y)\r\n    return overlap;\r\n  }\r\n\r\n  private checkBounds(newHead: Vec2D, canvasWidth, canvasHeight) {\r\n    let outBounds = newHead.x < 0 || newHead.x > canvasWidth / tileWidth || newHead.y < 0 || newHead.y >= canvasHeight / tileHeight;\r\n    return outBounds;\r\n  }\r\n\r\n  public addSegment() {\r\n    let tail: Vec2D = this.snakeParts[this.snakeParts.length - 1]\r\n    this.snakeParts.push(tail)\r\n  }\r\n}\r\n","import {Vec2D} from \"./vec2D\";\r\nimport {Drawable} from \"./Drawable\";\r\nimport {canvasDimension, tileWidth, tileHeight} from \"./main\";\r\nimport {Snake} from \"./snake\";\r\n\r\nexport class Food implements Drawable {\r\n  food: Vec2D\r\n  color = \"#fdc601\";\r\n\r\n  constructor(food: Vec2D) {\r\n    this.food = food\r\n  }\r\n\r\n  draw(gameboard: CanvasRenderingContext2D) {\r\n    gameboard.fillStyle = this.color\r\n    gameboard.fillRect(this.food.x * tileWidth, this.food.y * tileHeight, tileWidth, tileHeight)\r\n  }\r\n\r\n  update(snake: Snake) {\r\n    let snakeHead = snake.snakeParts[0]\r\n    let snakeOnFood = (snakeHead.x === this.food.x && snakeHead.y === this.food.y)\r\n    if (snakeOnFood) {\r\n      snake.addSegment()\r\n      snake.speed += 3\r\n      this.setRandomLocation()\r\n    }\r\n  }\r\n\r\n  setRandomLocation() {\r\n    let x = Math.floor(Math.random() * (canvasDimension.x / tileWidth));\r\n    let y = Math.floor(Math.random() * (canvasDimension.y / tileHeight));\r\n    this.food = {x: x, y: y}\r\n  }\r\n\r\n}\r\n\r\n\r\n",null],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","t","x","y","addEventListener","key","s","getContext","fillStyle","width","height","canvasDimension","a","tileWidth","tileHeight","o","speed","color","constructor","snakeParts","draw","fillRect","update","move","pop","checkOverlap","checkBounds","alert","unshift","addSegment","n","food","setRandomLocation","Math","floor","random","clearRect","requestAnimationFrame","h","$6ef0aff4d40b342494c36e09b9b2e0e6$var$direction","$6ef0aff4d40b342494c36e09b9b2e0e6$export$getDirection","ev","$178e1fdd5ecd9530c09e0a11c6b81613$var$canvas","$178e1fdd5ecd9530c09e0a11c6b81613$var$context2D","$178e1fdd5ecd9530c09e0a11c6b81613$var$size","$178e1fdd5ecd9530c09e0a11c6b81613$var$prevRenderTime","$178e1fdd5ecd9530c09e0a11c6b81613$var$snake","bodyParts","this","gameboard","part","canvasWidth","canvasHeight","currentHead","newHead","overlapOfSelf","bodyPart","tail","$178e1fdd5ecd9530c09e0a11c6b81613$var$food","snake","snakeHead","$178e1fdd5ecd9530c09e0a11c6b81613$var$tick","board","$178e1fdd5ecd9530c09e0a11c6b81613$var$gameLoop","currentTime"],"version":3,"file":"index.897c3208.js.map","sourceRoot":"/__parcel_source_root/"}